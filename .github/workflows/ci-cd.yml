name: Restaurant Project CI/CD

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

  lint:
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Lint customer app
        run: pnpm --filter customer lint

      - name: Lint admin app
        run: pnpm --filter admin lint

  build:
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env

      - name: Build apps
        run: pnpm build

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            apps/admin/.next
            apps/customer/.next
          key: ${{ runner.os }}-build-${{ github.sha }}

  test:
    needs: [lint, build]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: restaurant_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Restore node_modules from cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Setup test environment
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/restaurant_test" >> .env
          echo "NEXTAUTH_SECRET=test_secret" >> .env
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env

      - name: Setup database
        run: |
          pnpm --filter database db:push
          pnpm --filter database db:seed

      - name: Install Playwright browsers
        run: pnpm --filter test exec playwright install --with-deps

      - name: Run E2E tests
        run: pnpm --filter test test

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: packages/test/playwright-report/
          retention-days: 14

  deploy:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            apps/admin/.next
            apps/customer/.next
          key: ${{ runner.os }}-build-${{ github.sha }}

      # Deployment steps would go here
      # This is a placeholder for deployment - you would customize based on your hosting platform
      - name: Deploy to production
        run: |
          echo "Deployment would happen here"
          # Uncomment and configure when ready to deploy to Vercel:
          # - name: Deploy to Vercel
          #   uses: amondnet/vercel-action@v20
          #   with:
          #     vercel-token: ${{ secrets.VERCEL_TOKEN_SECRET }}
          #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID_SECRET }}
          #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_CUSTOMER_SECRET }}
          #     working-directory: ./apps/customer
          #     vercel-args: '--prod'
